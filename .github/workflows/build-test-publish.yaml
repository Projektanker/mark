name: 🛠️ Build, 🧪 Test, 🚀 Publish

on:
  push:

env:
  DOCKER_USERNAME: projektanker
  DOCKER_IMAGE: projektanker/mark
  IMAGE_ARTIFACT: projektanker-mark

jobs:
  build-test:
    name: 🛠️ Build, 🧪 Test
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v3

      - name: 🐋 Build Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE }}:latest

      - name: 🧪 Integration test
        working-directory: ./integration-test
        run: |
          docker run --name="test" -d -p="8080:8080" ${{ env.DOCKER_IMAGE }}:latest
          sleep 2
          cd ./template && tar -cf ../template.tar *  && cd -
          curl -F "files=@metadata.yaml" -F "files=@template.tar" -o test.pdf http://localhost:8080/api/pdf
          docker logs test > docker.log

      - name: 📤 Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: integration-test
          retention-days: 1
          path: |
            ./integration-test/test.pdf
            ./integration-test/docker.log

      - name: 💾 Save Docker image
        if: startsWith(github.ref, 'refs/tags/v')
        run: docker image save ${{ env.DOCKER_IMAGE }} > ${{ env.IMAGE_ARTIFACT }}.tar

      - name: 📤 Upload
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          retention-days: 1
          path: ${{ env.IMAGE_ARTIFACT }}.tar

  publish:
    name: 🚀 Publish
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: 🗝️ Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin

      - name: 📥 Download
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.IMAGE_ARTIFACT }}

      - name: 💾 Load Docker image
        run: docker image load < ${{ env.IMAGE_ARTIFACT }}.tar

      - name: 🏷️ Tag docker image
        run: |
          readarray -d . -t TAG <<< ${{ github.ref_name }}
          echo "MAJOR: ${TAG[0]}; MINOR: ${TAG[1]}; PATCH: ${TAG[2]}"
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${TAG[0]}
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${TAG[0]}.${TAG[1]}
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${TAG[0]}.${TAG[1]}.${TAG[2]}

      - name: 🐋 List docker images
        run: docker image ls

      - name: 🚀 Push to Docker Hub
        run: docker push --all-tags ${{ env.DOCKER_IMAGE }}

      - name: 🚪 Logout
        if: always()
        run: docker logout

  clean:
    name: 🧹 Clean
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: 🪣 Delete Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
